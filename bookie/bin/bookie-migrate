#!/usr/bin/env ruby

require 'optparse'

require 'bookie/database'

config_file = ENV['BOOKIE_CONFIG'] || Bookie::Database::Config::DEFAULT_PATH

target_version = nil

opts = OptionParser.new do |opts|
  opts.banner = "bookie-migrate [options]"

  opts.on('-c', '--config FILE', String, "use the given configuration file") do |file|
    config_file = file
  end

  opts.on('-v', '--version VERSION', Integer, "specify the target migration version") do |version|
    target_version = version
  end

  opts.on_tail('-h', '--help', "Show this message") do
    puts opts
    exit
  end
end
begin
  opts.parse!(ARGV)
rescue OptionParser::ParseError => e
  puts e.message
  puts opts
  exit 1
end

config = Bookie::Database::Config.load(File.open(config_file))
#TODO: remove this hack once migrations work on other connections.
config.connect(ActiveRecord::Base)

target_version ||= Bookie::Database.latest_version
current_version = ActiveRecord::Migrator.current_version

if target_version == current_version then
  puts "The database is already at version #{target_version}. No migration is necessary."
  exit 0
end

puts "Preparing to migrate from version #{current_version} to #{target_version}"

if target_version < current_version then
  puts 'Warning: target version is less than current version. The database will be rolled back.'
end

puts 'Migrations may cause loss of data. Ensure that you have a current backup of your database.'
STDOUT.write 'Proceed with migration? (YES/NO): '
response = nil
until response
  response = STDIN.gets.chomp
  case response
  when 'YES'
    puts "Migrating to version #{target_version}"
    Bookie::Database.migrate(target_version)
  when /^no?$/i
    exit 0
  else
    $stdout.write "Please answer 'YES' or 'NO'."
    response = nil
  end
end
