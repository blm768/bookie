#!/usr/bin/env ruby

require 'optparse'

#For development
#$LOAD_PATH << 'lib'

require 'bookie/formatter'

jobs = Bookie::Database::Job
summaries = Bookie::Database::JobSummary
systems = Bookie::Database::System

config_filename = '/etc/bookie/config.json'
include_details = false

output_type = :stdout
filename = nil

time_range = nil

#Process arguments

#The first run only gets the configuration filename
ARGV.each_with_index do |value, i|
  if value == '-c' || value == '--config'
    v = ARGV[i + 1]
    #If the argument is missing, ignore it; OptionParser will catch it later.
    config_filename = v if v
  end
end

config = Bookie::Config.new(config_filename)
config.connect

opts = OptionParser.new do |opts|
  opts.banner = "Usage: bookie-data [options]"
  
  opts.on('-c', '--config FILE', String, "use the given configuration file") do |file|
    #This is just here for validation and so it shows up in the usage message.
  end
  
  opts.on('-d', '--details', "include full details") do
    include_details = true
  end
  
  opts.on('-u', '--user NAME', "filter by username") do |name|
    jobs = jobs.by_user_name(name)
    summaries = summaries.by_user_name(name)
  end
  
  opts.on('-g', '--group NAME', "filter by group") do |name|
    jobs = jobs.by_group_name(name)
    summaries = summaries.by_group_name(name)
  end
  
  opts.on('-m', '--command', "filter by command") do |cmd|
    jobs = jobs.by_command_name(cmd)
    summaries = summaries.by_command_name(cmd)
  end
  
  opts.on('-s', '--system HOSTNAME', "filter by system") do |hostname|
    jobs = jobs.by_system_name(hostname)
    summaries = summaries.by_system_name(hostname)
    systems = systems.by_name(hostname)
  end
  
  opts.on('-t', '--type TYPE', "filter by system type") do |type|
    t = Bookie::Database::SystemType.find_by_name(type)
    unless t
      STDERR.puts "Unknown system type '#{type}'"
      exit 1
    end
    jobs = jobs.by_system_type(t)
    summaries = summaries.by_system_type(t)
    systems = systems.by_system_type(t)
  end
  
  opts.on('-r', '--time BEGIN,END', Array, "filter by a time range") do |t|
    time_range = Time.parse(t[0]) ... Time.parse(t[1])
  end
  
  opts.on('-o', '--output-file FILENAME', "send formatted output to FILENAME",
    "Output format is inferred from the filename extension.") do |output_filename|
    filename = output_filename
    case filename
    when /\.xls$/
      output_type = :spreadsheet
    when /\.csv$/
      output_type = :comma_dump
    else
      $stderr.puts "Unrecognized output file extension"
      exit 1
    end
  end
end
begin
  opts.parse!(ARGV)
rescue OptionParser::ParseError => e
  STDERR.puts e.message
  STDERR.puts opts
  exit 1
end

formatter = Bookie::Formatter.new(output_type, filename)

jobs_summary, systems_summary = formatter.print_summary(jobs, summaries, systems, time_range)
jobs = jobs.by_time_range_inclusive(time_range) if time_range
formatter.print_jobs(jobs.all) if include_details
formatter.flush
