#!/usr/bin/env ruby

require 'optparse'

require 'bookie/sender'

db_config_file = ENV['BOOKIE_CONFIG'] || Bookie::Database::Config::DEFAULT_PATH
sender_config_file = ENV['BOOKIE_CONFIG'] || '/etc/bookie/sender.rb'
will_create = false
will_undo = false

opts = OptionParser.new do |opts|
  opts.banner = "Usage: bookie-send [data-file] [options]"

  opts.on('-c', '--config FILE', String, "use the given database configuration file") do |file|
    db_config_file = file
  end

  opts.on('-s', '--sender-config FILE', String, "use the given sender configuration file") do |file|
    sender_config_file = file
  end

  opts.on('-u', '--undo', String, "undo a previous send operation (file must be specified)") do
    will_undo = true
  end

  opts.on("--create", "Create an entry for this system") do
    will_create = true
  end

  opts.on_tail('-h', '--help', "Show this message") do
    puts opts
    exit
  end
end
begin
  opts.parse!(ARGV)
rescue OptionParser::ParseError => e
  puts e.message
  puts opts
  exit 1
end

db_config = Bookie::Database::Config.load(File.open(db_config_file))
db_config.connect
sender_config = Bookie::SenderConfig.load(File.open(sender_config_file))

filename = ARGV[0]
unless filename || will_create
  STDERR.puts "No operation specified"
  exit 1
end

if will_create
  #TODO: catch duplicate errors instead of using this method; it's prone to race
  #conditions.
  Bookie::Database::System.transaction do
    system = Bookie::Database::System.active.where(name: sender_config.hostname).first
    if system
      stderr.puts "A system is already in the database with hostname '#{config.hostname}'."
      exit 1
    end
    system = Bookie::Database::System.create!(
      name: sender_config.hostname,
      system_type: Bookie::Sender.new(sender_config).system_type,
    )
    #TODO: create a SystemCapacity object?
  end
end

if filename
  sender = Bookie::Sender.new(sender_config)
  if will_undo
    sender.undo_send(filename)
  else
    sender.send_data(filename)
  end
end
