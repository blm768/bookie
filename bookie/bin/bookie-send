#!/usr/bin/env ruby

require 'optparse'

require 'bookie/sender'

db_config_file = ENV['BOOKIE_CONFIG'] || '/etc/bookie/db_config.rb'
sender_config_file = ENV['BOOKIE_CONFIG'] || '/etc/bookie/sender_config.rb'
will_create = false
will_decommission = false
will_undo = false
system_start_time = nil
system_hostname = nil
system_end_time = nil

opts = OptionParser.new do |opts|
  opts.banner = "Usage: bookie-send [data-file] [options]"

  opts.on('-c', '--config FILE', String, "use the given database configuration file") do |file|
    db_config_file = file
  end

  opts.on('-s', '--sender-config FILE', String, "use the given sender configuration file") do |file|
    sender_config_file = file
  end

  opts.on('-u', '--undo', String, "undo a previous send operation (file must be specified)") do
    will_undo = true
  end

  opts.on("--create [TIME]",
  "Create an entry for this system, recording the given time as its start time") do |time|
    will_create = true
    system_start_time = Time.parse(time) if time
  end

  opts.on("--decommission [HOSTNAME [TIME]]",
  String, String,
  "Decommission the system with the given hostname, recording the given time as its end time") do |hostname, time|
    will_decommission = true
    system_hostname = hostname if hostname
    system_end_time = Time.parse(time) if time
  end

  opts.on_tail('-h', '--help', "Show this message") do
    puts opts
    exit
  end
end
begin
  opts.parse!(ARGV)
rescue OptionParser::ParseError => e
  puts e.message
  puts opts
  exit 1
end

db_config = Bookie::Database::Config.load(File.open(db_config_file))
config.connect
sender_config = Bookie::SenderConfig.load(File.open(sender_config_file))

filename = ARGV[0]
unless filename || will_create || will_decommission
  STDERR.puts "No operation specified"
  exit 1
end

if filename
  sender = Bookie::Sender.new(sender_config)
  if will_undo
    sender.undo_send(filename)
  else
    sender.send_data(filename)
  end
end

if will_decommission
  system_hostname ||= sender_config.hostname
  system_end_time ||= Time.now
  Bookie::Database::Lock[:systems].synchronize do
    system = Bookie::Database::System.active_systems.where(:name => system_hostname).first
    if system
      puts "Note: make sure that all of this system's jobs have been recorded in the database before decommissioning it."
      STDOUT.write "Decommission this system? "
      response = nil
      until response
        response = STDIN.gets.chomp.downcase
        case response
        when "yes"
          system.decommission(system_end_time)
        when "no"
          exit 0
        else
          STDOUT.write("Please answer 'yes' or 'no'.")
          response = nil
        end
      end
    else
      stderr.puts "No active system with hostname #{system_hostname}"
      exit 1
    end
  end
end

if will_create
  system_start_time ||= Time.now
  Bookie::Database::Lock[:systems].synchronize do
    system = Bookie::Database::System.active_systems.where(name: sender_config.hostname).first
    if system
      stderr.puts "An active system is already in the database with hostname '#{config.hostname}'."
      exit 1
    end
  end
  Bookie::Database::System.create!(
    :name => config.hostname,
    :system_type => Bookie::Sender.new(config).system_type,
    :start_time => system_start_time,
    :end_time => nil,
    :cores => config.cores,
    :memory => config.memory
  )
end
