#!/usr/bin/env ruby

require 'optparse'

#For development
$LOAD_PATH.concat Dir.glob(File.join(Dir.pwd, "../*/lib"))

require 'bookie-client/client'

#For development
config = Bookie::Config.new('../snapshot/config.json')
config.connect
client = Bookie::Client::Client.new(config)

jobs = Bookie::Database::Job

include_details = false

filename = nil
output_file = nil
save_method = nil

#Process arguments
opts = OptionParser.new do |opts|
  opts.banner = "Usage: bookie-data [options]"
  
  opts.on('-d', '--details', "include full details") do
    include_details = true
  end
  
  opts.on('-u', '--user NAME', "filter by username") do |name|
    jobs = Bookie::Filter::by_user(jobs, name)
  end
  
  opts.on('-g', '--group NAME' "filter by group") do |name|
    jobs = Bookie::Filter::by_group(jobs, name)
  end
  
  opts.on('-system', '--system HOSTNAME', "filter by system") do |hostname|
    jobs = Bookie::Filter::by_system(jobs, hostname)
  end
  
  opts.on('-t', '--type TYPE', "filter by system type") do |type|
    jobs = Bookie::Filter::by_system_type(jobs, type)
  end
  
  opts.on('-s', '--start-time BEGIN END', "filter by start time") do |t_begin, t_end|
    t_begin = Time.parse(t_begin)
    t_end = Time.parse(t_end)
    jobs = Bookie::Filter::by_start_time(jobs, t_begin, t_end)
  end
  
  opts.on('-o', '--output-file FILENAME', "send formatted output to FILENAME") do |output_filename|
    filename = output_filename
    case filename
    when /\.xls$/
      output_file = Spreadsheet::Workbook.new
      save_method = :write
    when /\.csv$/
      output_file = File.open(filename, "w")
    else
      $stderr.puts "Unrecognized output file extension"
      exit 1
    end
  end
end
begin
  opts.parse(ARGV)
rescue OptionParser::ParseError => e
  puts e.message
  puts opts
  exit 1
end

#To do: ensure that the query isn't performed twice.
client.print_summary(jobs, output_file)
client.print_non_response_warnings(output_file)
client.print_jobs(jobs, output_file) if include_details

if output_file
  output_file.send(save_method, filename) if save_method
end
